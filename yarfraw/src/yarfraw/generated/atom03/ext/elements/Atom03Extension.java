//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.06.10 at 11:58:13 PM EDT 
//


package yarfraw.generated.atom03.ext.elements;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://purl.org/atom/ns#}title" minOccurs="0"/>
 *         &lt;element ref="{http://purl.org/atom/ns#}tagline" minOccurs="0"/>
 *         &lt;element ref="{http://purl.org/atom/ns#}info" minOccurs="0"/>
 *         &lt;element ref="{http://purl.org/atom/ns#}issued"/>
 *         &lt;element ref="{http://purl.org/atom/ns#}summary" minOccurs="0"/>
 *         &lt;element ref="{http://purl.org/atom/ns#}content" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "title",
    "tagline",
    "info",
    "issued",
    "summary",
    "content"
})
@XmlRootElement(name = "atom03Extension")
public class Atom03Extension {

    protected ContentType title;
    protected ContentType tagline;
    protected ContentType info;
    @XmlElement(required = true)
    protected String issued;
    protected ContentType summary;
    protected List<ContentType> content;

    /**
     *  
     * The "atom:title" element is a Content construct that conveys a human-readable title for the feed. atom:feed elements MUST contain exactly one atom:title element. If the feed describes a Web resource, its content SHOULD be the same as that resource's title.
     *  4.4
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ContentType }
     *     
     */
    public ContentType getTitle() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContentType }
     *     
     */
    public void setTitle(ContentType value) {
        this.title = value;
    }

    /**
     *  
     * The "atom:tagline" element is a Content construct that conveys a human-readable description or 
     * tagline for the feed. atom:feed elements MAY contain an atom:tagline element, but MUST NOT contain more than one.
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ContentType }
     *     
     */
    public ContentType getTagline() {
        return tagline;
    }

    /**
     * Sets the value of the tagline property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContentType }
     *     
     */
    public void setTagline(ContentType value) {
        this.tagline = value;
    }

    /**
     *  
     * The "atom:info" element is a Content construct that conveys a human-readable explanation of the feed format itself. atom:feed elements MAY contain an atom:info element, but MUST NOT contain more than one.
     * The atom:info element SHOULD NOT considered meaningful by processors; it is a convenience to publishers in certain situations. 
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ContentType }
     *     
     */
    public ContentType getInfo() {
        return info;
    }

    /**
     * Sets the value of the info property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContentType }
     *     
     */
    public void setInfo(ContentType value) {
        this.info = value;
    }

    /**
     *  
     * The "atom:issued" element is a Date construct that indicates the time that the entry was issued. atom:entry elements MUST contain an atom:issued element, but MUST NOT contain more than one.
     * The content of an atom:issued element MAY omit a time zone.  
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIssued() {
        return issued;
    }

    /**
     * Sets the value of the issued property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIssued(String value) {
        this.issued = value;
    }

    /**
     *  
     * The "atom:summary" element is a Content construct that conveys a short summary, 
     * abstract or excerpt of the entry. atom:entry elements MAY contain an atom:created element, but MUST NOT contain more than one. 
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ContentType }
     *     
     */
    public ContentType getSummary() {
        return summary;
    }

    /**
     * Sets the value of the summary property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContentType }
     *     
     */
    public void setSummary(ContentType value) {
        this.summary = value;
    }

    /**
     *  
     * The "atom:content" element is a Content construct that conveys the content of the entry. atom:entry elements MAY contain one or more atom:content elements.
     * If @type="multipart/alternative", @mode MUST NOT be specified, and content element MUST contain 1 or more content elements. These content elements MUST NOT 
     * specify @type="multipart/alternative" (i.e. only one level of nesting is allowed). Consumers SHOULD look at all alternative content elements and determine which one is most suitable, based on which @type and @mode the consumer supports, and preferences specified by the end user (if any). Consumers SHOULD NOT render more than one content alternative.  
     * 						 
     * 						Gets the value of the content property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ContentType }
     * 
     * 
     */
    public List<ContentType> getContent() {
        if (content == null) {
            content = new ArrayList<ContentType>();
        }
        return this.content;
    }

}
