//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.06.10 at 11:58:13 PM EDT 
//


package yarfraw.generated.itunes.elements;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}category" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}keywords" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}subtitle" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}duration" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}summary" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}image" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}explicit" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}owner" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}author" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}block" minOccurs="0"/>
 *         &lt;element ref="{http://www.itunes.com/dtds/podcast-1.0.dtd}new-feed-url" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "category",
    "keywords",
    "subtitle",
    "duration",
    "summary",
    "image",
    "explicit",
    "owner",
    "author",
    "block",
    "newFeedUrl"
})
@XmlRootElement(name = "itunesExtension")
public class ItunesExtension {

    protected List<ItunesCategoryType> category;
    protected String keywords;
    protected String subtitle;
    protected String duration;
    protected String summary;
    protected ItunesImageType image;
    protected String explicit;
    protected ItunesOwnerType owner;
    protected String author;
    protected String block;
    @XmlElement(name = "new-feed-url")
    protected String newFeedUrl;

    /**
     *  
     * <p>There are two ways to browse podcast subject categories on iTunes: click Browse in the Quick Links box or click a selection in the Category box. The former method leads to a text-based table, while the latter leads to pages that include the podcast art.</p> 
     * 					<p>For placement within the older, text-based browse system, podcast feeds may list up to 3 category/subcategory pairs. (For example, "Music" counts as 1, as does "Business &gt; Careers.") For placement within the newer browse system based on Category links, however, and for placement within the Top Podcasts lists that appear in the right column of most podcast pages, only the first category listed in the feed is used.</p>
     * 
     * 					<p>Categories and subcategories can be specified as follows. Use a top level <code>&lt;itunes:category&gt;</code> to specify the browse category, and a nested <code>&lt;itunes:category&gt;</code> to specify the browse subcategory. Choose from the existing categories and subcategories in iTunes. Be sure to properly escape ampersands. A complete list is included at the end of this document.</p>
     * 					<p>Note that a separate set of categories was active until July 2006, when it was replaced by the new set at the end of this document. During a transition period, most of the old categories and subcategories will be automatically mapped to corresponding ones within the new system. For example, if your podcast was listed under "Arts &amp; Entertainment &gt; Photography", it will now appear under "Arts &gt; Visual Arts." However, 3 categories have been removed and do not have a similar replacement: "International", "Talk Radio", and "Public Radio". Those categories overlapped with others in the old system, making some podcasts difficult to discover. If one of these categories is listed as the first subject in your podcast feed, that category information will be ignored and the second category will be used to determine eligibility and placement in that feature page.</p>
     * 
     * 					
     * 					<h4>Examples:</h4>
     * 	
     * 					<h4>Single category:</h4>
     * 					<pre><code>	&lt;itunes:category text="Music" /&gt;</code></pre><br>
     * 	
     * 					<h4>Category with ampersand:</h4>
     * 					<pre><code>	&lt;itunes:category text="TV &amp;amp; Film" /&gt;</code></pre><br>
     * 
     * 	
     * 					<h4>Category with Subcategory:</h4>
     * 					<pre><code>	&lt;itunes:category text="Society &amp;amp; Culture"&gt;
     * 		&lt;itunes:category text="History" /&gt;
     * 		&lt;/itunes:category&gt;</code></pre><br>
     * 	
     * 					<h4>Entry with multiple categories:</h4>
     * 
     * 					<pre><code>	&lt;itunes:category text="Society &amp;amp; Culture"&gt;
     * 		&lt;itunes:category text="History" /&gt;
     * 		&lt;/itunes:category&gt;
     * 		&lt;itunes:category text="Technology"&gt;
     * 		&lt;itunes:category text="Gadgets" /&gt;
     * 
     * 		&lt;/itunes:category&gt;</code></pre>
     * 						 
     * 						Gets the value of the category property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the category property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCategory().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItunesCategoryType }
     * 
     * 
     */
    public List<ItunesCategoryType> getCategory() {
        if (category == null) {
            category = new ArrayList<ItunesCategoryType>();
        }
        return this.category;
    }

    /**
     *  
     * This tag allows users to search on a maximum of 12 text keywords. Use commas to separate keywords.
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getKeywords() {
        return keywords;
    }

    /**
     * Sets the value of the keywords property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setKeywords(String value) {
        this.keywords = value;
    }

    /**
     *  
     * The contents of this tag are shown in the Description column in iTunes. The subtitle displays best if it is only a few words long.
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSubtitle() {
        return subtitle;
    }

    /**
     * Sets the value of the subtitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSubtitle(String value) {
        this.subtitle = value;
    }

    /**
     *  
     * <p>The content of this tag is shown in the Time column in iTunes.</p>
     * <p>The tag can be formatted HH:MM:SS, H:MM:SS, MM:SS, or M:SS (H = hours, M = minutes, S = seconds). If an integer is provided (no colon present), the value is assumed to be in seconds. If one colon is present, the number to the left is assumed to be minutes, and the number to the right is assumed to be seconds. If more than two colons are present, the numbers furthest to the right are ignored.</p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDuration() {
        return duration;
    }

    /**
     * Sets the value of the duration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDuration(String value) {
        this.duration = value;
    }

    /**
     *  
     * The contents of this tag are shown in a separate window that appears when the "circled i" in the Description 
     * column is clicked. It also appears on the iTunes page for your podcast. This field can be up to 4000 characters. 
     * If &lt;itunes:summary> is not included, the contents of the <description> tag are used.
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSummary() {
        return summary;
    }

    /**
     * Sets the value of the summary property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSummary(String value) {
        this.summary = value;
    }

    /**
     *  
     * <p>This tag specifies the artwork for your podcast. Put the URL to the image in the href attribute. iTunes prefers square .jpg images that are at least 300 x 300 pixels, which is different than what is specified for the standard RSS image tag.</p>
     * <p>iTunes supports images in JPEG and PNG formats. The URL must end in ".jpg" or ".png". If the itunes:image tag is not present, iTunes will use the contents of the RSS image tag.</p>
     * <p>If you change your podcasts image, also change the files name. iTunes may not change the image if it checks your feed and the image URL is the same.</p>
     * <p>Spend some time developing an attractive, original image that represents your podcast well. Potential subscribers will see it on your podcast�s page and a much smaller version of the image in search results and feature placements. Make sure your design is effective in both sizes.</p>
     * 
     * <p>The itunes:image tag is <b>not</b> supported at the item level. It is possible to include art within individual episodes, but the art is included within the media file�s metadata, not in the RSS feed. To add artwork to an episode using iTunes, highlight the episode and select "Get Info" from the "File" menu. Click the Artwork tab. Then click "Add," navigate to and select an image file, and click "Choose." </p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ItunesImageType }
     *     
     */
    public ItunesImageType getImage() {
        return image;
    }

    /**
     * Sets the value of the image property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItunesImageType }
     *     
     */
    public void setImage(ItunesImageType value) {
        this.image = value;
    }

    /**
     *  
     * <p>This tag should be used to indicate whether or not your podcast contains explicit material. The three values for this tag are "yes", "no", and "clean".</p>
     * 
     * <p>If you populate this tag with "yes", an "explicit" parental advisory graphic will appear next to your podcast artwork on the iTunes Music Store, and in the Name column in iTunes. If the value is "clean", the parental advisory type is considered Clean, meaning that no explicit language or adult content is included anywhere in the episodes, and a "clean" graphic will appear. If the explicit tag is present and has any other value (e.g. "no") you see no indicator � blank is the default advisory type.</p>
     * <p>This tag contains information that will be used to contact the owner of the podcast for communication specifically about their podcast. It will not be publicly displayed.</p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExplicit() {
        return explicit;
    }

    /**
     * Sets the value of the explicit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExplicit(String value) {
        this.explicit = value;
    }

    /**
     *  
     * <p>Put the email address of the owner in a nested <code><strong>&lt;itunes:email&gt;</strong></code>element.</p>
     * <p>Put the name of the owner in a nested <code><strong>&lt;itunes:name&gt;</strong></code>element.</p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link ItunesOwnerType }
     *     
     */
    public ItunesOwnerType getOwner() {
        return owner;
    }

    /**
     * Sets the value of the owner property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItunesOwnerType }
     *     
     */
    public void setOwner(ItunesOwnerType value) {
        this.owner = value;
    }

    /**
     *  
     * <p>The content of this tag is shown in the Artist column in iTunes. If the tag is not present, iTunes uses the contents of the <code>&lt;author&gt;</code> tag. If <code>&lt;itunes:author&gt;</code> is not present at the feed level, iTunes will use the contents of <code>&lt;managingEditor&gt;</code>.</p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Sets the value of the author property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuthor(String value) {
        this.author = value;
    }

    /**
     *  
     * <p>Use this inside a <code>&lt;channel&gt;</code> element to prevent the entire podcast from appearing in the iTunes Podcast directory. Use this inside an <code>&lt;item&gt;</code> element to prevent that episode from appearing in the iTunes Podcast directory. For example, you may want a specific episode blocked from iTunes if its content might cause the feed to be removed from iTunes.</p>
     * <p>If this tag is present and set to "yes" (case insensitive), that means to block the feed or the episode. If the tag�s value is any other value, including empty string, it�s indicated as a signal to unblock the feed or episode. At the feed level, if there is no block tag, then the block status of the feed is left unchanged. At the episode level, if there is no block tag, it is the same as if a block=no were present.</p>
     * 	
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBlock() {
        return block;
    }

    /**
     * Sets the value of the block property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBlock(String value) {
        this.block = value;
    }

    /**
     *  
     * This tag allows you to change the URL where the podcast feed is located. It is added at the <code>&lt;channel&gt;</code> level. The feed format is:</p>
     * 
     * <code>&lt;itunes:new-feed-url&gt;http://newlocation.com/example.rss&lt;/itunes:new-feed-url&gt;</code>
     * <p>After adding the tag to your old feed, you should maintain the old feed for 48 hours before retiring it. At that point, iTunes will have updated the directory with the new feed URL. For more information, please see the "Changing Your Feed URL" section above.</p>
     * 						 
     * 						
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNewFeedUrl() {
        return newFeedUrl;
    }

    /**
     * Sets the value of the newFeedUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNewFeedUrl(String value) {
        this.newFeedUrl = value;
    }

}
